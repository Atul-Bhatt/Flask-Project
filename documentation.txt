Create a .flaskenv file and put value of FLASK_APP and FLASK_ENV

Create a virtual environment:
    python -m venv <name-of-virtual-environment>

Create requirements.txt file:
    pip freeze > requirements.txt

Install all the dependencies in requirements.txt
    pip install -r requirements.txt

Every ".py" file is called a module.

To use the .flaskenv file install python-dotenv
    pip install python-dotenv

setting FLASK_APP in powershell
    $env:FLASK_APP = "main"

Create application forlder
    create __init__.py file
    create templates folder for html templates
    create static folder for static content like css, js, audio, video (anything that is not generated dynamically.)

move main file's content into __init__.py and import it into main.py


-------------------------------------
Running and Configuring the Development server

Create a config.py file in main folder
Create a routes.py file in application folder

-------------------------------------
Creating the Homepage

put the html files in the templates folder
import the render_template module from flask

{% Jinja code block %}
Example
{% include "include/footer.html" %}

-------------------------------------
Creating navigation links and route patterns

-> using the url_for function to resolve links
-> using the route decorator to bind functions to one or more url patterns
-> Jinja delimeters

Jinja:
{% ... %}       Statements
{{ ... }}       Expressions
{# ... #}       Comments

-------------------------------------
Working with templates

-> The Jinja template inheritance logic
-> Creating the base template
-> Using template inheritance to create child templates
-> Passing data to the view using props
-> Accessing data via the request and response object

if you want to render a template twice you can use this expression:
    {{ self.content() }}

-------------------------------------
Passing data to the view

Passing data from the source to the view
Highlighting the active menu item
Using the for directive
Building the course table with JSON data

-------------------------------------
Request and Response objects

URL variables
HTTP methods (GET, POST)
The global objects: Request and Response
Requests and Responses are all JSON API format